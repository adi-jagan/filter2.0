import React, { useState, useRef, useEffect } from 'react';
import './App.css';

function App() {
  // State variables
  const [recording, setRecording] = useState(false);
  const [videoBlob, setVideoBlob] = useState(null);
  const [uploadedVideoId, setUploadedVideoId] = useState('');
  const [uploadStatus, setUploadStatus] = useState('');
  const [permissionsGranted, setPermissionsGranted] = useState(false);
  const [previousVideos, setPreviousVideos] = useState([]);
  const [isLoadingVideos, setIsLoadingVideos] = useState(false);
  const [cameraActive, setCameraActive] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showStreamPreview, setShowStreamPreview] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  // Cloudflare Stream account details from environment variables
  const customerCode = process.env.REACT_APP_CLOUDFLARE_CUSTOMER_CODE;
  const accountId = process.env.REACT_APP_CLOUDFLARE_ACCOUNT_ID;
  const apiToken = process.env.REACT_APP_CLOUDFLARE_API_TOKEN;

  // Refs for accessing DOM elements and recording data
  const videoPreviewRef = useRef(null);     // For live webcam preview
  const recordedVideoRef = useRef(null);    // For recorded video playback
  const mediaRecorderRef = useRef(null);
  const streamRef = useRef(null);
  const chunksRef = useRef([]);

  // Extract setup camera to a standalone function so we can reuse it
  const setupCamera = async () => {
    try {
      // First make sure any existing tracks are stopped
      stopCamera();
      
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { width: 1280, height: 720 }, 
        audio: true 
      });
      
      if (videoPreviewRef.current) {
        videoPreviewRef.current.srcObject = stream;
        videoPreviewRef.current.controls = false;
      }
      
      streamRef.current = stream;
      setCameraActive(true);
      setPermissionsGranted(true);
      setShowStreamPreview(true); // Show the preview when stream starts
    } catch (err) {
      console.error('Error accessing webcam or microphone:', err);
      setUploadStatus('Error: Camera or microphone access denied');
      setCameraActive(false);
    }
  };
  
  // Dedicated function to explicitly stop the camera
  const stopCamera = () => {
    console.log('ATTEMPTING TO STOP CAMERA...');
    
    // First, ensure we stop all tracks individually
    if (streamRef.current) {
      console.log('Stopping all camera tracks...', streamRef.current);
      const tracks = streamRef.current.getTracks();
      console.log(`Found ${tracks.length} tracks to stop`);
      
      tracks.forEach(track => {
        try {
          console.log(`Stopping track: ${track.kind} (${track.readyState})`, track);
          track.enabled = false; // First disable it
          track.stop(); // Then stop it
          console.log(`Track stopped: ${track.readyState}`);
        } catch (err) {
          console.error('Error stopping track:', err);
        }
      });
    }
    
    // Also try to stop any audio and video tracks specifically
    try {
      const mediaDevices = navigator.mediaDevices;
      if (mediaDevices && typeof mediaDevices.getUserMedia === 'function') {
        // This is a workaround to help force permission dialogs to reappear
        console.log('Resetting user media access...');
      }
    } catch (err) {
      console.error('Error resetting media devices:', err);
    }
    
    // Clear the video element's source
    if (videoPreviewRef.current) {
      console.log('Clearing video source...');
      videoPreviewRef.current.pause();
      videoPreviewRef.current.srcObject = null;
      videoPreviewRef.current.load(); // Force a reload of the video element
    }
    
    // Set all refs to null
    streamRef.current = null;
    
    // Update state
    setCameraActive(false);
    setShowStreamPreview(false); // Hide the preview when camera is stopped
    console.log('Camera shutdown complete');
  };

  // Request camera permissions when component mounts
  useEffect(() => {
    // Don't automatically start camera on page load
    // setupCamera();
    fetchPreviousVideos();
    
    // Cleanup function to stop all tracks when component unmounts
    return () => {
      stopCamera();
    };
  }, []);
  
  // Add useEffect to load the Stream SDK
  useEffect(() => {
    // Load the Stream SDK
    const script = document.createElement('script');
    script.src = 'https://embed.cloudflarestream.com/embed/sdk.latest.js';
    script.async = true;
    
    // Add error handling for script loading
    script.onerror = () => {
      console.error('Failed to load Cloudflare Stream SDK');
      setUploadStatus('Failed to load video player. Please check your internet connection.');
    };
    
    script.onload = () => {
      console.log('Cloudflare Stream SDK loaded successfully');
    };
    
    document.body.appendChild(script);
    
    // Check video status periodically if we have an uploaded video
    let statusCheckInterval;
    if (uploadedVideoId) {
      // Start the processing indicator
      setIsProcessing(true);
      
      statusCheckInterval = setInterval(async () => {
        try {
          const response = await fetch(
            `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/${uploadedVideoId}`,
            {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${apiToken}`,
                'Content-Type': 'application/json'
              }
            }
          );
          
          const data = await response.json();
          if (data.success && data.result.status.state === 'ready') {
            console.log('Video is ready to play!');
            clearInterval(statusCheckInterval);
            setIsProcessing(false); // Stop the processing indicator
            setUploadStatus('Video ready to play!');
            // Refresh the list of videos after successful upload
            fetchPreviousVideos();
          } else if (data.success) {
            console.log('Video processing status:', data.result.status);
            setUploadStatus(`Video processing: ${data.result.status.state}`);
          }
        } catch (error) {
          console.error('Error checking video status:', error);
        }
      }, 5000); // Check every 5 seconds
    }
    
    return () => {
      if (document.body.contains(script)) {
        document.body.removeChild(script);
      }
      if (statusCheckInterval) {
        clearInterval(statusCheckInterval);
      }
    };
  }, [uploadedVideoId, accountId, apiToken]);
  
  // Initialize players for uploaded videos
  const initializePlayer = (playerElement, videoId) => {
    if (playerElement && window.Stream) {
      try {
        console.log(`Initializing player for video: ${videoId}`);
        const player = window.Stream(playerElement);
        
        // Add event listeners
        player.addEventListener('play', () => {
          console.log(`Video ${videoId} is playing!`);
        });
        
        player.addEventListener('error', (e) => {
          console.error(`Player error for ${videoId}:`, e);
        });
        
        // Try to play, but don't auto-start to avoid overwhelming the browser
        // with multiple video playback attempts
        player.addEventListener('canplay', () => {
          console.log(`Video ${videoId} is ready to play`);
        });
      } catch (err) {
        console.error('Error initializing player:', err);
      }
    }
  };

  // Fetch previously uploaded precious videos from Cloudflare Stream
  const fetchPreviousVideos = async () => {
    setIsLoadingVideos(true);
    try {
      console.log('Fetching videos from Cloudflare...');
      const response = await fetch(
        `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream?limit=10&status=ready`,
        {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${apiToken}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      const data = await response.json();
      console.log('API response:', data);
      
      if (data.success) {
        // Filter to include all videos that are ready to play
        const readyVideos = data.result.filter(video => 
          video.status && 
          video.status.state === 'ready'
        );
        
        setPreviousVideos(readyVideos);
        console.log('Fetched ready videos:', readyVideos);
        
        // Check for videos that aren't ready yet
        const processingVideos = data.result.filter(video => 
          !video.status || video.status.state !== 'ready'
        );
        
        if (processingVideos.length > 0) {
          console.log('Videos still processing:', processingVideos);
          setUploadStatus(`${processingVideos.length} video(s) still processing. They will appear when ready.`);
        }
      } else {
        console.error('Failed to fetch videos:', data.errors);
        setUploadStatus(`Error fetching videos: ${data.errors[0]?.message || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error fetching videos:', error);
      setUploadStatus(`Error fetching videos: ${error.message}`);
    }
    setIsLoadingVideos(false);
  };

  // Start recording from webcam
  const startRecording = () => {
    if (!streamRef.current) {
      setUploadStatus('Error: No camera access');
      return;
    }
    
    chunksRef.current = [];
    const mediaRecorder = new MediaRecorder(streamRef.current);
    
    mediaRecorder.ondataavailable = (event) => {
      if (event.data && event.data.size > 0) {
        chunksRef.current.push(event.data);
      }
    };
    
    mediaRecorder.onstop = () => {
      const blob = new Blob(chunksRef.current, { type: 'video/webm' });
      setVideoBlob(blob);
      
      // Create a URL for the blob to preview
      const videoURL = URL.createObjectURL(blob);
      videoPreviewRef.current.srcObject = null;
      videoPreviewRef.current.src = videoURL;
      videoPreviewRef.current.controls = true;
      
      setUploadStatus('Recording complete. Ready to upload.');
    };
    
    mediaRecorder.start();
    mediaRecorderRef.current = mediaRecorder;
    setRecording(true);
    setUploadStatus('Recording in progress...');
  };

  // Stop recording
  const stopRecording = () => {
    if (!mediaRecorderRef.current) return;
    
    console.log('Stopping recording...');
    mediaRecorderRef.current.stop();
    setRecording(false);
    // Start processing state right after stopping recording
    setUploadStatus('Preparing video for upload...');
  };

  // Upload the recorded video to Cloudflare Stream
  const uploadToCloudflare = async () => {
    if (!videoBlob) return;
    
    setUploadStatus('Uploading to Cloudflare...');
    setIsProcessing(true); // Start processing indicator during upload
    
    try {
      // Create a FormData object to send the video file
      const formData = new FormData();
      formData.append('file', videoBlob, 'recorded-video.webm');
      
      // Upload the video to Cloudflare Stream
      const response = await fetch(
        `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${apiToken}`
          },
          body: formData
        }
      );
      
      const data = await response.json();
      
      if (data.success) {
        setUploadStatus('Upload successful! Processing video...');
        setUploadedVideoId(data.result.uid);
        console.log('Uploaded video ID:', data.result.uid);
        // Note: We keep processing true until the periodic check detects the video is ready
      } else {
        setUploadStatus(`Upload failed: ${data.errors[0].message}`);
      }
    } catch (error) {
      console.error('Error uploading video:', error);
      setUploadStatus(`Error: ${error.message}`);
    }
  };
  
  // Reset the recording process
  const resetRecording = () => {
    // Stop any existing camera first
    stopCamera();
    
    // Then reinitialize the camera
    setupCamera();
    
    // Reset the rest of the state
    setVideoBlob(null);
    setUploadStatus('');
    if (videoPreviewRef.current) {
      videoPreviewRef.current.controls = false;
    }
  };

  // Format date for display
  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

          </svg>
          <span>Videos</span>
        </a>
        <a href="#" className="nav-item">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M4 4h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2zm0 2v12h16V6H4zm2 3h2v6H6V9zm3 0h2v6H9V9zm3 0h2v6h-2V9zm3 0h2v6h-2V9z" fill="currentColor"/>
          </svg>
          <span>Shorts</span>
        </a>
        <a href="#" className="nav-item">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M3 3h8v8H3V3zm0 10h8v8H3v-8zm10-10h8v8h-8V3zm0 10h8v8h-8v-8z" fill="currentColor"/>
          </svg>
          <span>Categories</span>
        </a>
      </nav>
            </svg>
            <span>Streams</span>
          </a>
          <a href="#" className="nav-item">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19.376 12.416L8.777 19.482A.5.5 0 0 1 8 19.066V4.934a.5.5 0 0 1 .777-.416l10.599 7.066a.5.5 0 0 1 0 .832z" fill="currentColor"/>
            </svg>
            <span>Videos</span>
          </a>
          <a href="#" className="nav-item">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M4 4h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2zm0 2v12h16V6H4zm2 3h2v6H6V9zm3 0h2v6H9V9zm3 0h2v6h-2V9zm3 0h2v6h-2V9z" fill="currentColor"/>
            </svg>
            <span>Shorts</span>
          </a>
          <a href="#" className="nav-item">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M3 3h8v8H3V3zm0 10h8v8H3v-8zm10-10h8v8h-8V3zm0 10h8v8h-8v-8z" fill="currentColor"/>
            </svg>
            <span>Categories</span>
          </a>
        </nav>
        
        <hr className="nav-divider" />
        
        <div className="nav-menu">
          <div className="nav-item">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12.5 3.247a1 1 0 0 0-1 0L4 7.577V20h4.5v-6a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v6H20V7.577l-7.5-4.33zm-2-1.732a3 3 0 0 1 3 0l7.5 4.33a2 2 0 0 1 1 1.732V21a1 1 0 0 1-1 1h-6.5a1 1 0 0 1-1-1v-6h-3v6a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7.577a2 2 0 0 1 1-1.732l7.5-4.33z" fill="currentColor"/>
            </svg>
            <span>Your Recordings</span>
          </div>
          <div className="nav-item">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M13 2.5V6h3.5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H13v3.5a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5V8H7.5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5H11V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z" fill="currentColor"/>
              <path d="M2 13.692V16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2.308A24.974 24.974 0 0 1 12 18a24.98 24.98 0 0 1-10-4.308z" fill="currentColor"/>
            </svg>
            <span>Create Recording</span>
          </div>
        </div>
      </aside>
      
      {/* Main content area */}
      <main className="main-content">
        {/* App header with navigation controls */}
        <div className="app-header">
          <div className="navigation-controls">
            <button className="nav-button">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M15.957 2.793a1 1 0 010 1.414L8.164 12l7.793 7.793a1 1 0 11-1.414 1.414L5.336 12l9.207-9.207a1 1 0 011.414 0z" fill="currentColor"/>
              </svg>
            </button>
            <button className="nav-button">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8.043 2.793a1 1 0 000 1.414L15.836 12l-7.793 7.793a1 1 0 101.414 1.414L18.664 12 9.457 2.793a1 1 0 00-1.414 0z" fill="currentColor"/>
              </svg>
            </button>
          </div>
          
          <div className="user-controls">
            {!cameraActive && (
              <button 
                onClick={setupCamera} 
                className="primary-btn camera-btn start-stream-btn"
              >
                <svg width="16" height="16" style={{ marginRight: '8px' }} viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M15.2 2.4h-2.4V0h-1.6v2.4H8.8v1.6h2.4V6.4h1.6V4h2.4V2.4z" fill="currentColor"/>
                  <path d="M8 8.8c1.767 0 3.2-1.433 3.2-3.2S9.767 2.4 8 2.4 4.8 3.833 4.8 5.6 6.233 8.8 8 8.8z" fill="currentColor"/>
                  <path d="M12 9.6H4c-1.983 0-3.6 1.617-3.6 3.6v2.4h15.2v-2.4c0-1.983-1.617-3.6-3.6-3.6z" fill="currentColor"/>
                </svg>
                Start Live Stream
              </button>
            )}
            
            {isLoggedIn ? (
              <div className="user-profile">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M8 0a8 8 0 100 16A8 8 0 008 0zm3.341 13.409A3.998 3.998 0 008 11a3.998 3.998 0 00-3.341 2.409A6.977 6.977 0 018 14c1.074 0 2.089-.245 3.341-.591zM6.5 7a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zm5.82 4.993A5.962 5.962 0 0013 8c0-3.308-2.692-6-6-6S1 4.692 1 8c0 1.495.544 2.867 1.44 3.92a5.968 5.968 0 015.055-2.87 5.971 5.971 0 014.825 2.943z" fill="currentColor"/>
                </svg>
              </div>
            ) : (
              <button 
                className="login-button" 
                onClick={() => setIsLoggedIn(true)}
              >
                Login
              </button>
            )}
          </div>
        </div>
        {/* Stream Preview Modal */}
        {showStreamPreview && (
          <div className="stream-preview-modal">
            <div className="stream-preview-content">
              <div className="modal-header">
                <h2>Live Stream Preview</h2>
                <button className="close-btn" onClick={() => setShowStreamPreview(false)}>
                  <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12.5 3.5l-9 9m0-9l9 9" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </button>
              </div>
              
              <video 
                ref={videoPreviewRef} 
                autoPlay 
                playsInline
                muted={cameraActive} // Only mute when showing live camera
                className="webcam-preview-modal"
              />
              
              <div className="button-container">
                {!recording && !videoBlob && cameraActive && (
                  <button 
                    onClick={startRecording} 
                    disabled={!permissionsGranted}
                    className="primary-btn record-btn"
                  >
                    <img 
                      src={`${process.env.PUBLIC_URL}/record.svg`} 
                      alt="Record" 
                      style={{ 
                        marginRight: '8px', 
                        width: '16px', 
                        height: '16px',
                        filter: 'none'
                      }} 
                    />
                    Start Recording
                  </button>
                )}
                
                {recording && (
                  <button 
                    onClick={stopRecording} 
                    className="secondary-btn stop-btn"
                  >
                    <img 
                      src={`${process.env.PUBLIC_URL}/record.svg`} 
                      alt="Stop Recording" 
                      style={{ 
                        marginRight: '8px', 
                        width: '16px', 
                        height: '16px',
                        filter: 'invert(21%) sepia(100%) saturate(7414%) hue-rotate(0deg) brightness(94%) contrast(117%)' // Makes the icon red
                      }} 
                    />
                    Stop Recording
                  </button>
                )}
                
                {cameraActive && !recording && (
                  <button 
                    onClick={stopCamera} 
                    className="secondary-btn stop-camera-btn"
                  >
                    <svg width="16" height="16" style={{ marginRight: '8px' }} viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M2.5 2.5l11 11m-11 0l11-11" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/>
                    </svg>
                    Turn Off Camera
                  </button>
                )}
              </div>
              
              {uploadStatus && (
                <div className="status-container">
                  <p>{uploadStatus}</p>
                </div>
              )}
            </div>
          </div>
        )}
        
        {/* Webcam container for non-modal video preview and controls */}
        <div className="webcam-container">
          {videoBlob && (
            <div className="button-container">
              <button 
                onClick={uploadToCloudflare} 
                className="primary-btn upload-btn"
              >
                <svg width="16" height="16" style={{ marginRight: '8px' }} viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M7.5 1.5l3.5 3.5m-3.5-3.5v9m-3.5-5.5l3.5-3.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="M2.5 10v2.5a1 1 0 001 1h9a1 1 0 001-1V10" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/>
                </svg>
                Upload to Cloud
              </button>
              
              <button 
                onClick={resetRecording} 
                className="secondary-btn reset-btn"
              >
                <svg width="16" height="16" style={{ marginRight: '8px' }} viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M13.5 2.5L12 1 10.5 2.5M12 1v4.5M4.5 4C3.12 4 2 5.12 2 6.5v6C2 13.88 3.12 15 4.5 15h6c1.38 0 2.5-1.12 2.5-2.5V10" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
                Record Again
              </button>
            </div>
          )}
          
          {uploadStatus && !showStreamPreview && (
            <div className="status-container">
              <p>{uploadStatus}</p>
            </div>
          )}
        </div>
        
        {videoBlob && !uploadedVideoId && (
          <div className="video-preview-container">
            <h2>Video Preview</h2>
            <div className="video-wrapper">
              <video 
                ref={recordedVideoRef}
                controls
                src={URL.createObjectURL(videoBlob)}
                width="100%"
                height="auto"
              />
              {isProcessing && (
                <div className="processing-overlay">
                  <div className="spinner"></div>
                  <p>Processing video...</p>
                </div>
              )}
            </div>
          </div>
        )}
        
        {uploadedVideoId && (
          <div className="stream-container">
            <h2>Recently Uploaded Video</h2>
            <div className="iframe-container">
              {isProcessing ? (
                <div className="processing-overlay full-overlay">
                  <div className="spinner"></div>
                  <p>Processing video...</p>
                  <p className="processing-note">This may take a few minutes</p>
                </div>
              ) : (
                <iframe
                  src={`https://${customerCode}/${uploadedVideoId}/iframe`}
                  style={{ border: 'none' }}
                  height="720"
                  width="1280"
                  allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
                  allowFullScreen={true}
                  id="recent-stream-player"
                  ref={el => {
                    if (el) {
                      // Initialize player once the iframe is loaded
                      el.onload = () => initializePlayer(el, uploadedVideoId);
                    }
                  }}
                  onError={(e) => {
                    console.error('Iframe loading error:', e);
                    setUploadStatus('Error loading video player. Video may still be processing.');
                    setIsProcessing(true); // Set back to processing if iframe fails to load
                  }}
                ></iframe>
              )}
            </div>
          </div>
        )}
        
        {/* Precious streams section */}
        <h2 className="videos-section-title">Precious Streams</h2>
        
        {isLoadingVideos ? (
          <div className="loading-container">
            <div className="spinner"></div>
            <p>Loading your recordings...</p>
          </div>
        ) : previousVideos.length > 0 ? (
          <div className="videos-grid">
            {previousVideos.map(video => (
              <div key={video.uid} className="video-card">
                <div className="video-thumbnail">
                  {/* These videos should be ready to play since we filtered for ready status */}
                  <iframe
                    src={`https://${customerCode}/${video.uid}/iframe`}
                    style={{ border: 'none' }}
                    allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
                    allowFullScreen={true}
                    className="stream-player"
                    ref={el => {
                      if (el) {
                        // Initialize player once the iframe is loaded
                        el.onload = () => initializePlayer(el, video.uid);
                      }
                    }}
                    onError={(e) => console.error(`Iframe loading error for video ${video.uid}:`, e)}
                  ></iframe>
                  <div className="play-button">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M7.05 3.606l13.49 7.788a.7.7 0 010 1.212L7.05 20.394A.7.7 0 016 19.788V4.212a.7.7 0 011.05-.606z" fill="currentColor"/>
                    </svg>
                  </div>
                </div>
                <div className="video-info">
                  <h3>{video.meta?.name || 'Untitled Video'}</h3>
                  <p className="video-date">
                    {formatDate(video.created)}
                  </p>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="empty-state">
            <p>No precious streams found. Start recording and mark your streams as precious to see them here.</p>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;